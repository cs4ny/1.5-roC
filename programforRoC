#pragma config(Sensor, dgtl1,  rightEncoder,   sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftEncoder,    sensorQuadEncoder)
#pragma config(Motor,  port2,           leftMotor,     tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port3,           rightMotor,    tmotorServoContinuousRotation, openLoop, reversed)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

// Coder = 1750 for forwardTime //
// Coder = 720 for turns //

// void: creating a function //

// First Function: forwardTime ( go straight ) //
	// - wait for 2 secs -
	// - set both sensor values to 0 -
	// - while statement for 1650 secs -
	// - if statements for straightening the robot -
	// - set both motors at 0 -

void forwardTime(int speed)
{
	wait1Msec(2000);
  SensorValue[rightEncoder] = 0;
  SensorValue[leftEncoder] = 0;
  while(SensorValue[leftEncoder] < speed)
  {
  	if(SensorValue[leftEncoder] > SensorValue[rightEncoder])
		{
			motor[rightMotor] = 63;
			motor[leftMotor] = 40;
		}
		if(SensorValue[rightEncoder] > SensorValue[leftEncoder])
		{
			motor[leftMotor] = 63;
			motor[rightMotor] = 40;
		}
		if(SensorValue[rightEncoder] == SensorValue[leftEncoder])
		{
			motor[leftMotor] = 63;
			motor[rightMotor] = 63;
		}

  }
  motor[leftMotor] = 0;
  motor[rightMotor] = 0;
}

// Second Function: turnRight (turn right at 90 degree) //
	// - wait 2 secs -
	// - set both sensors to 0 -
	// - while statement for 720 secs -
	// - set both motors to 0 -

void turnRight()
{
	wait1Msec(2000);
	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;
  while(SensorValue(rightEncoder) < 720)
	{
		motor[rightMotor] = 63;
		motor[leftMotor]  = 0;
	}
	motor[leftMotor] = 0;
	motor[rightMotor] = 0;
}

// Third Function: turnLeft (turn left at 90 degree) //
	// - wait 2 secs -
	// - set both sensors to 0 -
	// - while statement for 670 secs -
	// - set both motors to 0 -

void turnLeft()
{
	wait1Msec(2000);
	SensorValue[leftEncoder] = 0;
	SensorValue[rightEncoder] = 0;
  while(SensorValue(leftEncoder) < 675)
	{
		motor[rightMotor] = 0;
		motor[leftMotor]  = 63;
	}
	motor[leftMotor] = 0;
	motor[rightMotor] = 0;
}

// Four Function: backwardTurn (turn backward)//
	// - wait 2 secs -
	// - set both sensors to 0 -
	// - while statement for 720 secs -
	// - set both motors to 0 -

void backwardTurn()
{
	wait1Msec(2000);
	SensorValue[rightEncoder] = 0;
	SensorValue[leftEncoder] = 0;
  while(SensorValue(rightEncoder) < 720)
	{
		motor[rightMotor] = 63;
		motor[leftMotor]  = -63;
	}
	motor[leftMotor] = 0;
	motor[rightMotor] = 0;
}

// Task Main: This is what the robot will do //
	// The robot will go forward and turn right for 4 times //
	// And will return to where it starts//

task main()
{	forwardTime (1700);
	turnRight ();
	forwardTime(1700);
	turnRight();
	forwardTime(1700);
	turnRight();
	forwardTime(600);
	turnRight();
	forwardTime(500);
	turnRight();
	turnRight();
	backwardTurn();
	turnLeft ();
	turnLeft ();
	forwardTime(500);
	turnLeft ();
	forwardTime(600);
	turnLeft ();
	forwardTime(1750);
	turnLeft ();
	forwardTime(1650);
	turnLeft ();
	forwardTime(1700);

}
